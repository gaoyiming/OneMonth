package com.onemonth.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mrgao.onemonth.bean.JudgeByGroup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JUDGE_BY_GROUP".
*/
public class JudgeByGroupDao extends AbstractDao<JudgeByGroup, Long> {

    public static final String TABLENAME = "JUDGE_BY_GROUP";

    /**
     * Properties of entity JudgeByGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Classify = new Property(1, String.class, "classify", false, "CLASSIFY");
        public final static Property IsFinish = new Property(2, boolean.class, "isFinish", false, "IS_FINISH");
        public final static Property FinishRate = new Property(3, String.class, "finishRate", false, "FINISH_RATE");
        public final static Property FinishNum = new Property(4, int.class, "finishNum", false, "FINISH_NUM");
        public final static Property TotalNum = new Property(5, int.class, "totalNum", false, "TOTAL_NUM");
        public final static Property Data = new Property(6, String.class, "data", false, "DATA");
    }


    public JudgeByGroupDao(DaoConfig config) {
        super(config);
    }
    
    public JudgeByGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JUDGE_BY_GROUP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CLASSIFY\" TEXT," + // 1: classify
                "\"IS_FINISH\" INTEGER NOT NULL ," + // 2: isFinish
                "\"FINISH_RATE\" TEXT," + // 3: finishRate
                "\"FINISH_NUM\" INTEGER NOT NULL ," + // 4: finishNum
                "\"TOTAL_NUM\" INTEGER NOT NULL ," + // 5: totalNum
                "\"DATA\" TEXT);"); // 6: data
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JUDGE_BY_GROUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JudgeByGroup entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String classify = entity.getClassify();
        if (classify != null) {
            stmt.bindString(2, classify);
        }
        stmt.bindLong(3, entity.getIsFinish() ? 1L: 0L);
 
        String finishRate = entity.getFinishRate();
        if (finishRate != null) {
            stmt.bindString(4, finishRate);
        }
        stmt.bindLong(5, entity.getFinishNum());
        stmt.bindLong(6, entity.getTotalNum());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(7, data);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JudgeByGroup entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String classify = entity.getClassify();
        if (classify != null) {
            stmt.bindString(2, classify);
        }
        stmt.bindLong(3, entity.getIsFinish() ? 1L: 0L);
 
        String finishRate = entity.getFinishRate();
        if (finishRate != null) {
            stmt.bindString(4, finishRate);
        }
        stmt.bindLong(5, entity.getFinishNum());
        stmt.bindLong(6, entity.getTotalNum());
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(7, data);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public JudgeByGroup readEntity(Cursor cursor, int offset) {
        JudgeByGroup entity = new JudgeByGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // classify
            cursor.getShort(offset + 2) != 0, // isFinish
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // finishRate
            cursor.getInt(offset + 4), // finishNum
            cursor.getInt(offset + 5), // totalNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JudgeByGroup entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClassify(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsFinish(cursor.getShort(offset + 2) != 0);
        entity.setFinishRate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFinishNum(cursor.getInt(offset + 4));
        entity.setTotalNum(cursor.getInt(offset + 5));
        entity.setData(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(JudgeByGroup entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(JudgeByGroup entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JudgeByGroup entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
